# BetLink - Database Product Requirements Document

## 1. üìã Vis√£o Geral

### 1.1 Objetivo
Definir a arquitetura completa do banco de dados para o BetLink, uma plataforma de intermedia√ß√£o entre tipsters e clientes, com foco em transpar√™ncia total, integra√ß√£o com Telegram e automa√ß√£o de processos.

### 1.2 Stack Tecnol√≥gico
- **Database**: PostgreSQL via Supabase
- **Authentication**: Supabase Auth
- **Security**: Row Level Security (RLS)
- **Real-time**: Supabase Realtime
- **Integration**: Telegram Bot API

### 1.3 Princ√≠pios Fundamentais
- **Transpar√™ncia Total**: Apostas imut√°veis via Telegram
- **Automa√ß√£o M√°xima**: 80% dos dados calculados automaticamente
- **Seguran√ßa por Design**: RLS em todas as tabelas
- **Performance**: Views otimizadas e √≠ndices estrat√©gicos
- **Integridade**: Relacionamentos bem definidos

---

## 2. üèóÔ∏è Arquitetura de Dados

### 2.1 Diagrama de Relacionamentos

```mermaid
erDiagram
    auth_users ||--|| profiles : "1:1"
    profiles ||--o{ canais : "tipster_id"
    profiles ||--o{ assinaturas : "cliente_id"
    profiles ||--o{ solicitacoes_canais : "tipster_id"
    profiles ||--o{ lista_espera : "cliente_id"
    
    canais ||--o{ assinaturas : "canal_id"
    canais ||--o{ apostas : "canal_id"
    canais ||--o{ lista_espera : "canal_id"
    canais ||--|| solicitacoes_canais : "canal_criado_id"
    
    assinaturas ||--o{ pagamentos : "assinatura_id"
    
    auth_users {
        uuid id PK
        string email
        string encrypted_password
        timestamp created_at
    }
    
    profiles {
        uuid id PK,FK
        string nome_completo
        string telegram_username UK
        bigint telegram_id UK
        enum role
        enum status
    }
    
    canais {
        uuid id PK
        uuid tipster_id FK
        string nome
        decimal preco_mensal
        string telegram_username UK
        enum status
    }
    
    apostas {
        uuid id PK
        uuid canal_id FK
        string descricao
        decimal odd
        decimal stake
        enum status
        decimal lucro_calculado
    }
```

### 2.2 Categoriza√ß√£o de Tabelas

#### **Core Tables (Cr√≠ticas)**
- `profiles` - Usu√°rios do sistema
- `canais` - Canais de tips
- `assinaturas` - Relacionamento cliente-canal
- `apostas` - Apostas dos tipsters

#### **Workflow Tables (Importantes)**
- `solicitacoes_canais` - Fluxo de aprova√ß√£o
- `lista_espera` - Fila para canais lotados
- `pagamentos` - Transa√ß√µes financeiras

#### **System Tables (Suporte)**
- `configuracoes` - Settings do sistema
- `logs_atividade` - Auditoria

---

## 3. üìä Schema Detalhado

### 3.1 Tipos Enum

```sql
-- Roles de usu√°rio
CREATE TYPE user_role AS ENUM ('master', 'admin', 'tipster', 'cliente');

-- Status de usu√°rio
CREATE TYPE user_status AS ENUM ('ativo', 'pausado', 'bloqueado', 'pendente');

-- Status de canal
CREATE TYPE canal_status AS ENUM ('ativo', 'pausado', 'configurando');

-- Sincroniza√ß√£o Telegram
CREATE TYPE telegram_sync_status AS ENUM ('sincronizado', 'criando', 'erro', 'nao_configurado');

-- Status de solicita√ß√£o
CREATE TYPE solicitacao_status AS ENUM ('pendente', 'aprovado', 'rejeitado', 'alteracoes_solicitadas');

-- Status de assinatura
CREATE TYPE assinatura_status AS ENUM ('ativa', 'vencida', 'cancelada', 'periodo_graca');

-- Status de aposta
CREATE TYPE aposta_status AS ENUM ('open', 'green', 'half_green', 'red', 'half_red', 'void', 'drop', 'cancelada');

-- M√©todos de pagamento
CREATE TYPE pagamento_metodo AS ENUM ('stripe', 'mercado_pago', 'pix');
```

### 3.2 Tabelas Principais

#### **profiles** (Extens√£o do Supabase Auth)
```sql
CREATE TABLE profiles (
    id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
    
    -- Dados B√°sicos
    nome_completo TEXT NOT NULL,
    avatar_url TEXT,
    telefone VARCHAR(15), -- (11) 99999-9999
    
    -- Telegram (obrigat√≥rio para tipsters e clientes)
    telegram_username VARCHAR(32) UNIQUE, -- sem @
    telegram_id BIGINT UNIQUE, -- ID num√©rico
    
    -- Sistema
    role user_role NOT NULL DEFAULT 'cliente',
    status user_status NOT NULL DEFAULT 'ativo',
    
    -- Metadados
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    last_login_at TIMESTAMPTZ,
    
    -- Constraint: Telegram obrigat√≥rio para tipster/cliente
    CONSTRAINT telegram_required_for_tipster_cliente 
        CHECK (
            (role IN ('tipster', 'cliente') AND telegram_username IS NOT NULL) OR 
            (role IN ('master', 'admin'))
        )
);
```

#### **canais** (Produtos da plataforma)
```sql
CREATE TABLE canais (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    
    -- Relacionamentos
    tipster_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
    created_by UUID REFERENCES profiles(id) NOT NULL, -- Admin que criou
    
    -- Dados B√°sicos
    nome VARCHAR(100) NOT NULL,
    descricao TEXT,
    preco_mensal DECIMAL(10,2) NOT NULL CHECK (preco_mensal >= 10.00),
    max_assinantes INTEGER NOT NULL CHECK (max_assinantes >= 10),
    
    -- Telegram
    telegram_username VARCHAR(32) UNIQUE, -- Username do canal
    telegram_id BIGINT UNIQUE, -- ID do canal
    telegram_link TEXT, -- t.me/username
    telegram_sync_status telegram_sync_status DEFAULT 'nao_configurado',
    
    -- Configura√ß√µes
    mercados_principais TEXT[], -- ['futebol', 'basquete']
    casas_recomendadas TEXT[], -- ['bet365', 'sportingbet']
    periodo_graca_dias INTEGER DEFAULT 3,
    
    -- Status
    status canal_status DEFAULT 'configurando',
    
    -- Metadados
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### **apostas** (Transpar√™ncia Total - Apenas Telegram)
```sql
CREATE TABLE apostas (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    
    -- Relacionamento
    canal_id UUID REFERENCES canais(id) ON DELETE CASCADE NOT NULL,
    
    -- Dados Imut√°veis (v√™m do Telegram)
    data_tip TIMESTAMPTZ NOT NULL, -- Quando foi enviada
    data_evento TIMESTAMPTZ NOT NULL, -- Quando √© o evento
    descricao TEXT NOT NULL,
    bookie VARCHAR(50),
    odd DECIMAL(8,4) NOT NULL CHECK (odd > 1.0),
    stake DECIMAL(6,2) NOT NULL CHECK (stake > 0),
    link_adicional TEXT,
    
    -- Status (√önico campo edit√°vel)
    status aposta_status DEFAULT 'open',
    
    -- Telegram
    telegram_message_id BIGINT, -- ID da mensagem
    telegram_bot_response TEXT, -- Resposta do bot
    
    -- C√°lculos Autom√°ticos
    lucro_calculado DECIMAL(10,4) DEFAULT 0,
    
    -- Metadados (Imut√°veis)
    created_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### **assinaturas** (Relacionamento Cliente-Canal)
```sql
CREATE TABLE assinaturas (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    
    -- Relacionamentos
    cliente_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
    canal_id UUID REFERENCES canais(id) ON DELETE CASCADE NOT NULL,
    
    -- Dados da Assinatura
    preco_pago DECIMAL(10,2) NOT NULL,
    desconto_aplicado DECIMAL(5,2) DEFAULT 0,
    codigo_promocional VARCHAR(20),
    origem origem_assinatura DEFAULT 'organica',
    
    -- Datas
    data_inicio DATE NOT NULL DEFAULT CURRENT_DATE,
    data_vencimento DATE NOT NULL,
    data_cancelamento TIMESTAMPTZ,
    
    -- Status
    status assinatura_status DEFAULT 'ativa',
    
    -- Telegram Integration
    adicionado_telegram_at TIMESTAMPTZ,
    removido_telegram_at TIMESTAMPTZ,
    
    -- Metadados
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    
    -- Constraint: Uma assinatura por cliente por canal
    UNIQUE(cliente_id, canal_id)
);
```

#### **solicitacoes_canais** (Workflow de Aprova√ß√£o)
```sql
CREATE TABLE solicitacoes_canais (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    
    -- Relacionamentos
    tipster_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
    admin_id UUID REFERENCES profiles(id), -- Quem analisou
    
    -- Dados Solicitados
    nome VARCHAR(100) NOT NULL,
    telegram_username_desejado VARCHAR(32) NOT NULL,
    descricao TEXT NOT NULL,
    preco_mensal DECIMAL(10,2) NOT NULL,
    max_assinantes INTEGER NOT NULL,
    mercados_principais TEXT[] NOT NULL,
    casas_recomendadas TEXT[],
    justificativa TEXT NOT NULL,
    
    -- Processo
    status solicitacao_status DEFAULT 'pendente',
    observacoes_admin TEXT,
    canal_criado_id UUID REFERENCES canais(id), -- Se aprovado
    
    -- Metadados
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    analisado_at TIMESTAMPTZ
);
```

### 3.3 Tabelas de Suporte

#### **lista_espera** (Fila para Canais Lotados)
```sql
CREATE TABLE lista_espera (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    
    -- Relacionamentos
    cliente_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
    canal_id UUID REFERENCES canais(id) ON DELETE CASCADE NOT NULL,
    
    -- Posi√ß√£o e Controle
    posicao INTEGER NOT NULL,
    convidado_at TIMESTAMPTZ,
    convite_expira_at TIMESTAMPTZ, -- 24h para aceitar
    resposta_at TIMESTAMPTZ,
    aceito BOOLEAN,
    
    -- Metadados
    created_at TIMESTAMPTZ DEFAULT NOW(),
    
    -- Constraint: Cliente √∫nico por canal
    UNIQUE(cliente_id, canal_id)
);
```

#### **pagamentos** (Hist√≥rico Financeiro)
```sql
CREATE TABLE pagamentos (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    
    -- Relacionamentos
    assinatura_id UUID REFERENCES assinaturas(id) ON DELETE CASCADE NOT NULL,
    cliente_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
    
    -- Dados do Pagamento
    valor DECIMAL(10,2) NOT NULL,
    metodo pagamento_metodo NOT NULL,
    external_id VARCHAR(255), -- ID do Stripe/MercadoPago
    status pagamento_status DEFAULT 'pendente',
    
    -- Metadados
    created_at TIMESTAMPTZ DEFAULT NOW(),
    processed_at TIMESTAMPTZ,
    processor_response JSONB
);
```

#### **configuracoes** (System Settings)
```sql
CREATE TABLE configuracoes (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    chave VARCHAR(100) UNIQUE NOT NULL,
    valor JSONB NOT NULL,
    descricao TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Configura√ß√µes Iniciais
INSERT INTO configuracoes (chave, valor, descricao) VALUES
('telegram_bot_token', '""', 'Token do bot principal'),
('comissao_plataforma', '0.10', 'Comiss√£o da plataforma (10%)'),
('periodo_graca_padrao', '3', 'Per√≠odo de gra√ßa padr√£o');
```

#### **logs_atividade** (Auditoria)
```sql
CREATE TABLE logs_atividade (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES profiles(id),
    action log_action NOT NULL,
    table_name VARCHAR(50),
    record_id UUID,
    details JSONB,
    ip_address INET,
    user_agent TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
```

---

## 4. üîß Automa√ß√£o e Triggers

### 4.1 Triggers Autom√°ticos

#### **Updated At Timestamp**
```sql
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Aplicar em todas as tabelas relevantes
CREATE TRIGGER update_profiles_updated_at BEFORE UPDATE ON profiles
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
```

#### **C√°lculo Autom√°tico de Lucro**
```sql
CREATE OR REPLACE FUNCTION calculate_aposta_lucro()
RETURNS TRIGGER AS $$
BEGIN
    NEW.lucro_calculado = CASE
        WHEN NEW.status = 'green' THEN (NEW.stake * NEW.odd) - NEW.stake
        WHEN NEW.status = 'half_green' THEN ((NEW.stake * NEW.odd) - NEW.stake) / 2
        WHEN NEW.status = 'red' THEN -NEW.stake
        WHEN NEW.status = 'half_red' THEN -NEW.stake / 2
        WHEN NEW.status IN ('void', 'drop', 'cancelada') THEN 0
        ELSE 0 -- open
    END;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER calculate_apostas_lucro BEFORE INSERT OR UPDATE ON apostas
    FOR EACH ROW EXECUTE FUNCTION calculate_aposta_lucro();
```

### 4.2 Views Calculadas

#### **canal_stats** (M√©tricas em Tempo Real)
```sql
CREATE VIEW canal_stats AS
SELECT 
    c.id,
    c.nome,
    c.tipster_id,
    
    -- Assinantes
    COUNT(a.cliente_id) as total_assinantes,
    COUNT(a.cliente_id) FILTER (WHERE a.status = 'ativa') as assinantes_ativos,
    c.max_assinantes - COUNT(a.cliente_id) FILTER (WHERE a.status = 'ativa') as vagas_disponiveis,
    
    -- Receita
    SUM(a.preco_pago) FILTER (WHERE a.status = 'ativa') as receita_mensal,
    
    -- Apostas
    COUNT(ap.id) as total_apostas,
    COUNT(ap.id) FILTER (WHERE ap.status NOT IN ('open', 'drop', 'cancelada')) as apostas_resolvidas,
    
    -- Performance
    COALESCE(SUM(ap.lucro_calculado) FILTER (WHERE ap.status NOT IN ('drop', 'cancelada')), 0) as lucro_total,
    COALESCE(SUM(ap.stake) FILTER (WHERE ap.status NOT IN ('drop', 'cancelada')), 0) as stake_total,
    
    -- ROI
    CASE 
        WHEN SUM(ap.stake) FILTER (WHERE ap.status NOT IN ('drop', 'cancelada')) > 0 
        THEN (SUM(ap.lucro_calculado) FILTER (WHERE ap.status NOT IN ('drop', 'cancelada')) / 
              SUM(ap.stake) FILTER (WHERE ap.status NOT IN ('drop', 'cancelada'))) * 100
        ELSE 0 
    END as roi_percentage,
    
    -- Taxa de Acerto
    CASE 
        WHEN COUNT(ap.id) FILTER (WHERE ap.status IN ('green', 'red', 'half_green', 'half_red')) > 0
        THEN (COUNT(ap.id) FILTER (WHERE ap.status IN ('green', 'half_green')) * 100.0) / 
             COUNT(ap.id) FILTER (WHERE ap.status IN ('green', 'red', 'half_green', 'half_red'))
        ELSE 0
    END as taxa_acerto
    
FROM canais c
LEFT JOIN assinaturas a ON c.id = a.canal_id
LEFT JOIN apostas ap ON c.id = ap.canal_id
GROUP BY c.id, c.nome, c.tipster_id, c.max_assinantes;
```

#### **tipster_dashboard** (Dashboard Consolidado)
```sql
CREATE VIEW tipster_dashboard AS
SELECT 
    p.id as tipster_id,
    p.nome_completo,
    
    -- Canais
    COUNT(c.id) as total_canais,
    COUNT(c.id) FILTER (WHERE c.status = 'ativo') as canais_ativos,
    
    -- Performance Consolidada
    COALESCE(SUM(cs.total_assinantes), 0) as total_assinantes,
    COALESCE(SUM(cs.receita_mensal), 0) as receita_total_mensal,
    COALESCE(AVG(cs.roi_percentage), 0) as roi_medio,
    COALESCE(SUM(cs.total_apostas), 0) as total_apostas_geral
    
FROM profiles p
LEFT JOIN canais c ON p.id = c.tipster_id
LEFT JOIN canal_stats cs ON c.id = cs.id
WHERE p.role = 'tipster'
GROUP BY p.id, p.nome_completo;
```

---

## 5. üîí Seguran√ßa (Row Level Security)

### 5.1 Pol√≠ticas RLS

#### **profiles** (Usu√°rios)
```sql
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

-- Usu√°rios veem pr√≥prio perfil
CREATE POLICY "Users can view own profile" ON profiles
    FOR SELECT USING (auth.uid() = id);

-- Admins veem todos os perfis
CREATE POLICY "Admins can view all profiles" ON profiles
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM profiles 
            WHERE id = auth.uid() 
            AND role IN ('master', 'admin')
        )
    );
```

#### **canais** (Isolamento por Tipster)
```sql
ALTER TABLE canais ENABLE ROW LEVEL SECURITY;

-- Tipsters veem pr√≥prios canais
CREATE POLICY "Tipsters can view own canais" ON canais
    FOR SELECT USING (tipster_id = auth.uid());

-- Admins veem todos os canais
CREATE POLICY "Admins can view all canais" ON canais
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM profiles 
            WHERE id = auth.uid() 
            AND role IN ('master', 'admin')
        )
    );

-- Clientes veem apenas canais que assinam ou p√∫blicos
CREATE POLICY "Clientes can view subscribed canais" ON canais
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM assinaturas 
            WHERE canal_id = id 
            AND cliente_id = auth.uid()
            AND status = 'ativa'
        )
        OR status = 'ativo' -- Canais p√∫blicos para descoberta
    );
```

#### **apostas** (Transpar√™ncia Total)
```sql
ALTER TABLE apostas ENABLE ROW LEVEL SECURITY;

-- Tipsters veem apostas dos pr√≥prios canais
CREATE POLICY "Tipsters can view own canal apostas" ON apostas
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM canais 
            WHERE id = canal_id 
            AND tipster_id = auth.uid()
        )
    );

-- Clientes veem apostas dos canais assinados
CREATE POLICY "Clientes can view subscribed canal apostas" ON apostas
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM assinaturas a
            JOIN canais c ON a.canal_id = c.id
            WHERE c.id = canal_id 
            AND a.cliente_id = auth.uid()
            AND a.status = 'ativa'
        )
    );
```

### 5.2 Permiss√µes de Modifica√ß√£o

#### **Insert/Update/Delete por Role**
```sql
-- Apenas admins podem criar canais
CREATE POLICY "Only admins can create canais" ON canais
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM profiles 
            WHERE id = auth.uid() 
            AND role IN ('master', 'admin')
        )
    );

-- Tipsters podem atualizar status das pr√≥prias apostas
CREATE POLICY "Tipsters can update own apostas status" ON apostas
    FOR UPDATE USING (
        EXISTS (
            SELECT 1 FROM canais 
            WHERE id = canal_id 
            AND tipster_id = auth.uid()
        )
    )
    WITH CHECK (
        -- Apenas status pode ser alterado
        OLD.data_tip = NEW.data_tip AND
        OLD.data_evento = NEW.data_evento AND
        OLD.descricao = NEW.descricao AND
        OLD.odd = NEW.odd AND
        OLD.stake = NEW.stake
    );
```

---

## 6. üìà Performance e √çndices

### 6.1 √çndices Estrat√©gicos

#### **√çndices B√°sicos**
```sql
-- Profiles
CREATE INDEX idx_profiles_role ON profiles(role);
CREATE INDEX idx_profiles_telegram_username ON profiles(telegram_username);

-- Canais
CREATE INDEX idx_canais_tipster_id ON canais(tipster_id);
CREATE INDEX idx_canais_status ON canais(status);
CREATE INDEX idx_canais_telegram_sync ON canais(telegram_sync_status);

-- Assinaturas
CREATE INDEX idx_assinaturas_cliente_id ON assinaturas(cliente_id);
CREATE INDEX idx_assinaturas_canal_id ON assinaturas(canal_id);
CREATE INDEX idx_assinaturas_status_vencimento ON assinaturas(status, data_vencimento);

-- Apostas
CREATE INDEX idx_apostas_canal_id ON apostas(canal_id);
CREATE INDEX idx_apostas_canal_status ON apostas(canal_id, status);
CREATE INDEX idx_apostas_data_evento ON apostas(data_evento);
```

#### **√çndices de Performance**
```sql
-- Para queries de dashboard
CREATE INDEX idx_assinaturas_ativas_canal ON assinaturas(canal_id) 
    WHERE status = 'ativa';

-- Para c√°lculos de ROI
CREATE INDEX idx_apostas_resolvidas ON apostas(canal_id, status) 
    WHERE status NOT IN ('open', 'drop', 'cancelada');

-- Para busca de texto
CREATE INDEX idx_canais_nome_search ON canais 
    USING gin(to_tsvector('portuguese', nome));
```

### 6.2 Query Optimization

#### **Materialized Views** (Para Dados Pesados)
```sql
-- Para dashboards admin com muito volume
CREATE MATERIALIZED VIEW mv_platform_stats AS
SELECT 
    COUNT(*) FILTER (WHERE role = 'tipster') as total_tipsters,
    COUNT(*) FILTER (WHERE role = 'cliente') as total_clientes,
    (SELECT COUNT(*) FROM canais WHERE status = 'ativo') as canais_ativos,
    (SELECT SUM(receita_mensal) FROM canal_stats) as receita_total
FROM profiles;

-- Refresh autom√°tico via cron job
```

---

## 7. üîÑ Jobs e Automa√ß√£o

### 7.1 Jobs Peri√≥dicos Necess√°rios

#### **Di√°rio (Critical)**
```sql
-- 1. Atualizar status de assinaturas vencidas
-- 2. Processar lista de espera (convites autom√°ticos)
-- 3. Sincronizar com Telegram (adicionar/remover membros)
-- 4. Limpar tokens expirados
```

#### **Semanal (Important)**
```sql
-- 1. Refresh materialized views
-- 2. An√°lise de performance de canais
-- 3. Relat√≥rios autom√°ticos para admins
-- 4. Backup incremental
```

#### **Mensal (Maintenance)**
```sql
-- 1. Limpeza de logs antigos (>90 dias)
-- 2. An√°lise de √≠ndices e performance
-- 3. Backup completo
-- 4. Auditoria de dados inconsistentes
```

### 7.2 Webhook Handlers

#### **Telegram Webhooks**
- **Nova aposta**: Processar template ‚Üí Insert em `apostas`
- **Membro adicionado**: Log em `logs_atividade`
- **Membro removido**: Verificar se foi manual ou autom√°tico

#### **Payment Webhooks**
- **Stripe**: Atualizar status em `pagamentos`
- **MercadoPago**: Processar confirma√ß√£o de PIX
- **Falha**: Iniciar per√≠odo de gra√ßa

---

## 8. üö® Pontos Cr√≠ticos de Sincroniza√ß√£o

### 8.1 M√©tricas Calculadas

#### **PROBLEMA**: ROI aparece em m√∫ltiplas telas
**SOLU√á√ÉO**:
```sql
-- View canal_stats centralizada
-- Cache de 5 minutos no frontend
-- Invalida√ß√£o autom√°tica via triggers
```

#### **TELAS AFETADAS**:
- `/canais` (grid de canais)
- `/canal/[id]` (p√°gina individual)
- `/[canal]/apostas` (cards resumo)
- `/admin/canais` (tabela global)

### 8.2 Status de Assinaturas

#### **PROBLEMA**: Status deve estar sincronizado
**SOLU√á√ÉO**:
```sql
-- Job di√°rio para atualizar vencimentos
-- Trigger para mudan√ßas em data_vencimento
-- Webhook para processar pagamentos
-- Sincroniza√ß√£o autom√°tica com Telegram
```

#### **ESTADOS**:
- `ativa` ‚Üí Acesso liberado no Telegram
- `vencida` ‚Üí 3 dias per√≠odo de gra√ßa
- `periodo_graca` ‚Üí Ainda com acesso
- `cancelada` ‚Üí Removido do Telegram

### 8.3 Telegram Integration

#### **PROBLEMA**: Status de sincroniza√ß√£o cr√≠tico
**SOLU√á√ÉO**:
```sql
-- Campo telegram_sync_status em canais
-- Webhook para atualiza√ß√µes em tempo real
-- Job de verifica√ß√£o de sa√∫de (5 min)
-- Retry autom√°tico para falhas tempor√°rias
```

#### **MONITORING**:
- Dashboard admin mostra status de todos os canais
- Alertas autom√°ticos para problemas
- Logs detalhados de todas as opera√ß√µes

---

## 9. üìä Mapeamento Frontend ‚Üí Database

### 9.1 √Årea P√∫blica

#### **Landing Page** (`/`)
```sql
-- Estat√≠sticas gerais
SELECT COUNT(*) FROM canais WHERE status = 'ativo';
SELECT COUNT(*) FROM profiles WHERE role = 'cliente';
SELECT AVG(roi_percentage) FROM canal_stats;

-- Canais em destaque (top 6)
SELECT * FROM canal_stats ORDER BY roi_percentage DESC LIMIT 6;
```

#### **P√°gina de Canais** (`/canais`)
```sql
-- Lista com filtros
SELECT c.*, p.nome_completo as tipster_nome, cs.*
FROM canais c
JOIN profiles p ON c.tipster_id = p.id
JOIN canal_stats cs ON c.id = cs.id
WHERE c.status = 'ativo'
  AND cs.roi_percentage >= :min_roi
  AND c.preco_mensal BETWEEN :min_preco AND :max_preco
ORDER BY :sort_field;
```

### 9.2 √Årea do Cliente

#### **Dashboard** (`/dashboard`)
```sql
-- Cards resumo
SELECT 
    COUNT(*) as total_assinaturas,
    COUNT(*) FILTER (WHERE status = 'ativa') as ativas,
    SUM(preco_pago) FILTER (WHERE status = 'ativa') as custo_mensal
FROM assinaturas 
WHERE cliente_id = auth.uid();

-- Tabela de canais
SELECT a.*, c.nome as canal_nome, c.telegram_link
FROM assinaturas a
JOIN canais c ON a.canal_id = c.id
WHERE a.cliente_id = auth.uid();
```

### 9.3 √Årea do Tipster

#### **Meus Canais** (`/meus-canais`)
```sql
-- Grid de canais
SELECT c.*, cs.*
FROM canais c
JOIN canal_stats cs ON c.id = cs.id
WHERE c.tipster_id = auth.uid();

-- Solicita√ß√µes pendentes
SELECT * FROM solicitacoes_canais 
WHERE tipster_id = auth.uid() 
  AND status = 'pendente';
```

#### **Apostas do Canal** (`/[canal]/apostas`)
```sql
-- Cards resumo (per√≠odo filtrado)
SELECT 
    SUM(lucro_calculado) as lucro_total,
    SUM(stake) as stake_total,
    (SUM(lucro_calculado) / SUM(stake)) * 100 as roi
FROM apostas 
WHERE canal_id = :canal_id 
  AND data_tip >= :data_inicio
  AND status NOT IN ('drop', 'cancelada');

-- Tabela de apostas
SELECT * FROM apostas 
WHERE canal_id = :canal_id 
ORDER BY data_tip DESC 
LIMIT :limit OFFSET :offset;
```

### 9.4 √Årea Admin

#### **Dashboard Admin** (`/admin/dashboard`)
```sql
-- M√©tricas principais
SELECT 
    (SELECT COUNT(*) FROM profiles WHERE role = 'tipster') as total_tipsters,
    (SELECT COUNT(*) FROM profiles WHERE role = 'cliente') as total_clientes,
    (SELECT COUNT(*) FROM canais WHERE status = 'ativo') as canais_ativos,
    (SELECT SUM(receita_mensal) FROM canal_stats) as receita_total;

-- Atividades recentes
SELECT * FROM logs_atividade 
ORDER BY created_at DESC 
LIMIT 20;
```

#### **Gest√£o de Canais** (`/admin/canais`)
```sql
-- Tabela global
SELECT c.*, p.nome_completo as tipster_nome, cs.*
FROM canais c
JOIN profiles p ON c.tipster_id = p.id
LEFT JOIN canal_stats cs ON c.id = cs.id
ORDER BY c.created_at DESC;
```

---

## 10. üéØ Dados Input vs Calculados

### 10.1 Dados Inputados (Manual)

#### **Por Admins**
```sql
-- Cria√ß√£o de tipsters
INSERT INTO profiles (nome_completo, email, telefone, telegram_username, role);

-- Cria√ß√£o de canais
INSERT INTO canais (nome, descricao, preco_mensal, max_assinantes, tipster_id);

-- Aprova√ß√£o de solicita√ß√µes
UPDATE solicitacoes_canais SET status = 'aprovado', admin_id = auth.uid();
```

#### **Por Tipsters**
```sql
-- Solicita√ß√£o de canais
INSERT INTO solicitacoes_canais (nome, descricao, preco_mensal, justificativa);

-- Altera√ß√£o de status das apostas (√öNICA edi√ß√£o permitida)
UPDATE apostas SET status = 'green' WHERE id = :aposta_id;
```

#### **Por Clientes**
```sql
-- Cadastro
INSERT INTO profiles (nome_completo, email, telefone, telegram_username);

-- Assinatura
INSERT INTO assinaturas (cliente_id, canal_id, preco_pago);
```

#### **Por Sistema Externo (Telegram Bot)**
```sql
-- Apostas via template
INSERT INTO apostas (canal_id, data_evento, descricao, odd, stake, telegram_message_id);
```

### 10.2 Dados Calculados (Autom√°tico)

#### **Triggers em Tempo Real**
```sql
-- Lucro das apostas (trigger)
NEW.lucro_calculado = CASE WHEN NEW.status = 'green' THEN (NEW.stake * NEW.odd) - NEW.stake

-- Timestamps autom√°ticos
NEW.updated_at = NOW();

-- Status de assinaturas (trigger di√°rio)
UPDATE assinaturas SET status = 'vencida' WHERE data_vencimento < CURRENT_DATE;
```

#### **Views Din√¢micas**
```sql
-- ROI, receita, estat√≠sticas (canal_stats)
-- Dashboard consolidado (tipster_dashboard)
-- M√©tricas da plataforma (platform_stats)
```

#### **Jobs Peri√≥dicos**
```sql
-- Status de assinaturas vencidas (di√°rio)
-- Sincroniza√ß√£o com Telegram (5 min)
-- Processamento de lista de espera (di√°rio)
-- Limpeza de logs antigos (mensal)
```

---

## 11. üîç Valida√ß√µes e Constraints

### 11.1 Valida√ß√µes de Neg√≥cio

#### **Telegram Username**
```sql
-- Formato v√°lido (5-32 chars, sem @)
CHECK (telegram_username ~ '^[a-zA-Z0-9_]{5,32}$')

-- Obrigat√≥rio para tipster/cliente
CHECK ((role IN ('tipster', 'cliente') AND telegram_username IS NOT NULL) OR (role IN ('master', 'admin')))
```

#### **Pre√ßos e Valores**
```sql
-- Pre√ßo m√≠nimo
CHECK (preco_mensal >= 10.00)

-- Stake v√°lido
CHECK (stake > 0)

-- Odd v√°lida
CHECK (odd > 1.0)

-- Limite de assinantes
CHECK (max_assinantes >= 10)
```

#### **Datas e Per√≠odos**
```sql
-- Data de vencimento futura
CHECK (data_vencimento > data_inicio)

-- Per√≠odo de gra√ßa v√°lido
CHECK (periodo_graca_dias >= 0 AND periodo_graca_dias <= 30)
```

### 11.2 Integridade Referencial

#### **Cascades Definidas**
```sql
-- Usu√°rio deletado ‚Üí Perfil deletado (CASCADE)
-- Tipster deletado ‚Üí Canais deletados (CASCADE)
-- Canal deletado ‚Üí Assinaturas canceladas (CASCADE)
-- Assinatura deletada ‚Üí Pagamentos mantidos (RESTRICT)
```

#### **Unique Constraints**
```sql
-- telegram_username √∫nico globalmente
-- Cliente + Canal √∫nico (uma assinatura por par)
-- Email √∫nico (via Supabase Auth)
```

---

## 12. üöÄ Roadmap de Implementa√ß√£o

### 12.1 Fase 1 - Core Tables (Semana 1)
- ‚úÖ Setup Supabase + PostgreSQL
- ‚úÖ Criar types enum
- ‚úÖ Implementar `profiles`, `canais`, `assinaturas`, `apostas`
- ‚úÖ Configurar RLS b√°sico

### 12.2 Fase 2 - Automation (Semana 2)
- ‚úÖ Triggers para c√°lculos autom√°ticos
- ‚úÖ Views `canal_stats` e `tipster_dashboard`
- ‚úÖ Jobs para status de assinaturas
- ‚úÖ √çndices de performance

### 12.3 Fase 3 - Workflow (Semana 3)
- ‚úÖ `solicitacoes_canais` + aprova√ß√£o
- ‚úÖ `lista_espera` + convites autom√°ticos
- ‚úÖ `pagamentos` + webhooks
- ‚úÖ `logs_atividade` + auditoria

### 12.4 Fase 4 - Integration (Semana 4)
- ‚úÖ Telegram webhooks
- ‚úÖ Sincroniza√ß√£o autom√°tica
- ‚úÖ Monitoring e alertas
- ‚úÖ Backup e recovery

### 12.5 Fase 5 - Optimization (Ongoing)
- üìä Materialized views para dashboards
- üöÄ Query optimization
- üìà Performance monitoring
- üîß Fine-tuning baseado em uso real

---

## 13. üîß Configura√ß√£o e Deploy

### 13.1 Environment Variables
```env
# Supabase
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=

# Telegram
TELEGRAM_BOT_TOKEN=
TELEGRAM_WEBHOOK_SECRET=

# Payments
STRIPE_SECRET_KEY=
MERCADOPAGO_ACCESS_TOKEN=
```

### 13.2 Migration Scripts
```sql
-- 001_initial_schema.sql
-- 002_add_triggers.sql
-- 003_create_views.sql
-- 004_setup_rls.sql
-- 005_add_indexes.sql
```

### 13.3 Seed Data
```sql
-- Configura√ß√µes iniciais
-- Usu√°rio master padr√£o
-- Tipos de mercados e casas
-- Configura√ß√µes do sistema
```

---

## 14. üìã Checklist de Valida√ß√£o

### 14.1 Funcional
- [ ] Todas as p√°ginas carregam dados corretos
- [ ] C√°lculos autom√°ticos funcionam
- [ ] RLS impede acessos n√£o autorizados
- [ ] Webhooks processam corretamente
- [ ] Jobs executam no hor√°rio

### 14.2 Performance
- [ ] Queries < 100ms para dashboards
- [ ] Views calculam em < 500ms
- [ ] √çndices otimizados
- [ ] Cache funciona corretamente

### 14.3 Seguran√ßa
- [ ] RLS ativo em todas as tabelas
- [ ] Dados sens√≠veis n√£o expostos
- [ ] Logs de auditoria funcionam
- [ ] Backups autom√°ticos

### 14.4 Integra√ß√£o
- [ ] Telegram sync 100% funcional
- [ ] Payments processam corretamente
- [ ] Emails autom√°ticos enviados
- [ ] Webhooks resilientes

---

## 15. üìû Suporte e Manuten√ß√£o

### 15.1 Monitoring
- **Database performance**: Query times, index usage
- **Data integrity**: Foreign keys, constraints
- **Sync status**: Telegram integration health
- **Business metrics**: Conversion rates, churn

### 15.2 Alertas Autom√°ticos
- **Critical**: Database down, sync failures
- **Warning**: Slow queries, high memory
- **Info**: Daily summaries, backup status

### 15.3 Documentation
- **Schema docs**: Automaticamente gerados
- **API docs**: Para webhooks e integra√ß√µes
- **Runbooks**: Procedimentos de emerg√™ncia
- **Change log**: Hist√≥rico de altera√ß√µes

---

## üéØ Conclus√£o

Este PRD define uma arquitetura robusta, segura e perform√°tica para o BetLink, com foco em:

- **Transpar√™ncia total** nas apostas via Telegram
- **Automa√ß√£o m√°xima** de c√°lculos e processos
- **Seguran√ßa por design** com RLS granular
- **Performance otimizada** com views e √≠ndices estrat√©gicos
- **Escalabilidade** para crescimento futuro

A implementa√ß√£o seguir√° as fases definidas, priorizando funcionalidade core e depois otimiza√ß√µes avan√ßadas.