# BetLink - Workflow Detalhado por Feature

## üìã Vis√£o Geral

Cada feature √© uma evolu√ß√£o incremental e test√°vel do aplicativo. Este workflow garante que cada implementa√ß√£o seja isolada, test√°vel e n√£o quebre funcionalidades existentes.

---

## üîÑ As 6 Etapas do Workflow

### **1Ô∏è‚É£ PLANEJAMENTO** üìã

#### Objetivo
Criar um contrato claro e espec√≠fico do que ser√° constru√≠do, com teste humano bem definido.

#### Template de Planejamento

```markdown
# Feature: [Nome da Feature]

## 1. Teste Humano
**O que testar**: [Descri√ß√£o clara do que o usu√°rio deve conseguir fazer]
**Como testar**:
1. [Passo 1]
2. [Passo 2]
3. [Passo 3]

**Resultado esperado**: [Descri√ß√£o ou screenshot do resultado final]

## 2. Depend√™ncias
- **Features anteriores**: [Lista de features que devem estar funcionando]
- **Arquivos existentes**: 
  - `/path/to/file1.ts`
  - `/path/to/file2.tsx`
- **Bibliotecas necess√°rias**: 
  - `@supabase/supabase-js`
  - `react-hook-form`

## 3. Guardrails
### N√ÉO MODIFICAR
- `/app/layout.tsx` - Layout principal
- `/lib/supabase/client.ts` - Configura√ß√£o base
- [Outros arquivos cr√≠ticos]

### DEVE MANTER
- Navega√ß√£o existente funcionando
- Autentica√ß√£o (se j√° implementada)
- [Outros comportamentos]

### PODE CRIAR
- `/app/[nova-rota]/page.tsx`
- `/components/features/[feature]/`
- [Outros arquivos permitidos]

### DEVE REUTILIZAR
- Componente `Button` de `/components/ui/`
- Hook `useAuth` de `/hooks/`
- [Outros recursos existentes]

## 4. Contexto T√©cnico
### Quais Documentos devo usar de contexto?


### Schema do Banco (apenas relevante)
```sql
-- Apenas tabelas necess√°rias para esta feature
CREATE TABLE profiles (
  id UUID PRIMARY KEY,
  ...
);
```

### APIs/Fun√ß√µes Dispon√≠veis
```typescript
// Exemplo de fun√ß√£o dispon√≠vel
async function getUser(id: string) { ... }
```

### Padr√µes do Projeto
- Nomenclatura: PascalCase para componentes
- Imports: Ordem espec√≠fica (ver guia)
- [Outros padr√µes]

## 5. Estimativa
- **Complexidade**: Baixa/M√©dia/Alta
- **Tempo estimado**: X horas
- **Riscos identificados**: [Lista]
```

---

### **2Ô∏è‚É£ EXECU√á√ÉO** üöÄ

#### Estrat√©gias para Implementa√ß√£o

##### A. Sistema de Logs Estruturados
```typescript
// Padr√£o de logs para rastreabilidade
const FEATURE_NAME = '[Feature: NomeDaFeature]';

console.log(`${FEATURE_NAME} Iniciando processo...`);
console.error(`${FEATURE_NAME} Erro encontrado:`, error);
console.warn(`${FEATURE_NAME} Aten√ß√£o:`, warning);

// Em componentes React
useEffect(() => {
  console.log(`${FEATURE_NAME} Componente montado`);
  return () => console.log(`${FEATURE_NAME} Componente desmontado`);
}, []);
```

##### B. Coment√°rios de Guardrail
```typescript
/**
 * @feature: Login
 * @guardrail: Este arquivo √© base - N√ÉO MODIFICAR
 * @dependencies: supabase, react-hook-form
 * @created: Feature 1
 */

// No topo de arquivos cr√≠ticos
// @protected: N√£o modificar sem aprova√ß√£o
```

##### C. Error Boundaries por Feature
```typescript
// components/features/[feature]/error-boundary.tsx
export function FeatureErrorBoundary({ 
  children, 
  feature 
}: { 
  children: React.ReactNode;
  feature: string;
}) {
  return (
    <ErrorBoundary
      fallback={<div>Erro na feature: {feature}</div>}
      onError={(error) => {
        console.error(`[Feature: ${feature}] Erro capturado:`, error);
      }}
    >
      {children}
    </ErrorBoundary>
  );
}
```

##### D. Feature Flags
```typescript
// config/feature-flags.ts
export const FEATURES = {
  AUTH: true,           // ‚úÖ Implementado
  CANAIS_LIST: true,    // ‚úÖ Implementado
  PAYMENT: false,       // üöß Em desenvolvimento
  TELEGRAM_BOT: false,  // ‚è≥ Planejado
} as const;

// Uso no c√≥digo
if (FEATURES.PAYMENT) {
  return <PaymentComponent />;
}
return <ComingSoon feature="Pagamentos" />;
```

---

### **3Ô∏è‚É£ TESTE IA** ü§ñ

#### Template de Teste Playwright

```typescript
// tests/features/[nome-feature].spec.ts
import { test, expect } from '@playwright/test';

const FEATURE_NAME = 'Nome da Feature';

test.describe(`Feature: ${FEATURE_NAME}`, () => {
  // Setup antes de todos os testes
  test.beforeEach(async ({ page }) => {
    console.log(`[Test: ${FEATURE_NAME}] Iniciando teste`);
    await page.goto('/');
  });

  test('Teste principal: [descri√ß√£o do que deve funcionar]', async ({ page }) => {
    // Arrange - Preparar
    await page.waitForLoadState('networkidle');
    
    // Act - Agir
    await page.click('[data-testid="botao-principal"]');
    
    // Assert - Verificar
    await expect(page.locator('[data-testid="resultado"]')).toBeVisible();
    
    // Log de sucesso
    console.log(`‚úÖ ${FEATURE_NAME}: Teste principal passou`);
  });

  test('N√£o deve quebrar features anteriores', async ({ page }) => {
    // Verificar que navega√ß√£o ainda funciona
    await expect(page.locator('nav')).toBeVisible();
    
    // Verificar que outras rotas ainda carregam
    await page.goto('/dashboard');
    await expect(page).not.toHaveURL('/404');
    
    console.log(`‚úÖ ${FEATURE_NAME}: Features anteriores OK`);
  });

  // Teste de erro
  test('Deve mostrar erro apropriado quando falhar', async ({ page }) => {
    // Simular erro
    await page.route('**/api/**', route => route.abort());
    
    // Verificar tratamento
    await page.click('[data-testid="acao-que-falha"]');
    await expect(page.locator('.error-message')).toBeVisible();
    
    console.log(`‚úÖ ${FEATURE_NAME}: Tratamento de erro OK`);
  });
});
```

#### Script de Auto-corre√ß√£o

```typescript
// scripts/test-and-fix.ts
async function testAndFix() {
  console.log('ü§ñ Executando testes automatizados...');
  
  const result = await runTests();
  
  if (!result.success) {
    console.log('‚ùå Erros encontrados. Tentando corrigir...');
    
    for (const error of result.errors) {
      if (error.type === 'MISSING_IMPORT') {
        await fixMissingImport(error);
      } else if (error.type === 'TYPE_ERROR') {
        await fixTypeError(error);
      }
      // ... outras corre√ß√µes autom√°ticas
    }
    
    // Testar novamente
    const retryResult = await runTests();
    if (retryResult.success) {
      console.log('‚úÖ Erros corrigidos automaticamente!');
    } else {
      console.log('‚ö†Ô∏è Alguns erros precisam de interven√ß√£o manual');
    }
  }
}
```

---

### **4Ô∏è‚É£ TESTE HUMANO** üë§

#### Checklist de Valida√ß√£o

```markdown
## Checklist de Teste Manual - Feature: [Nome]

### Funcionalidade Principal
- [ ] A feature funciona conforme o teste definido no planejamento?
- [ ] Todos os casos de uso est√£o cobertos?
- [ ] A UX est√° intuitiva e sem bugs visuais?

### Regress√£o
- [ ] Features anteriores continuam funcionando?
- [ ] Navega√ß√£o entre p√°ginas est√° normal?
- [ ] N√£o h√° erros no console?

### Performance
- [ ] P√°gina carrega em menos de 3 segundos?
- [ ] N√£o h√° re-renders desnecess√°rios?
- [ ] Imagens e assets est√£o otimizados?

### Responsividade
- [ ] Desktop (1920x1080) ‚úì
- [ ] Laptop (1366x768) ‚úì
- [ ] Tablet (768x1024) ‚úì
- [ ] Mobile (375x667) ‚úì

### Acessibilidade
- [ ] Navega√ß√£o por teclado funciona?
- [ ] Cores t√™m contraste adequado?
- [ ] Elementos t√™m labels apropriados?

### Seguran√ßa
- [ ] Dados sens√≠veis n√£o aparecem em logs?
- [ ] Autentica√ß√£o/autoriza√ß√£o funcionando?
- [ ] Inputs est√£o validados?

### Observa√ß√µes
[Espa√ßo para notas durante o teste]
```

---

### **5Ô∏è‚É£ REFINAMENTO** üîß

#### Processo de Refinamento

```markdown
## Refinamento - Feature: [Nome]

### 1. Problemas Identificados

#### üî¥ Cr√≠ticos (Bloqueiam release)
1. **Problema**: [Descri√ß√£o]
   - **Impacto**: [O que est√° quebrado]
   - **Solu√ß√£o proposta**: [Como corrigir]
   - **Status**: ‚è≥ Pendente / ‚úÖ Resolvido

#### üü° Importantes (Devem ser corrigidos)
1. **Problema**: [Descri√ß√£o]
   - **Impacto**: [O que afeta]
   - **Solu√ß√£o proposta**: [Como melhorar]
   - **Status**: ‚è≥ Pendente / ‚úÖ Resolvido

#### üü¢ Nice-to-have (Melhorias futuras)
1. **Melhoria**: [Descri√ß√£o]
   - **Benef√≠cio**: [Por que fazer]
   - **Complexidade**: Baixa/M√©dia/Alta

### 2. Log de Corre√ß√µes
```
[Data/Hora] - Corrigido: [descri√ß√£o] - [arquivo modificado]
[Data/Hora] - Testado: [o que foi verificado] - OK ‚úÖ
```

### 3. Decis√µes T√©cnicas
- **Decis√£o**: [O que foi decidido]
  **Motivo**: [Por que essa escolha]
  **Alternativas consideradas**: [Outras op√ß√µes]
```

---

### **6Ô∏è‚É£ DOCUMENTA√á√ÉO** üìö

#### A. Status Update (`docs/features-status.md`)

```markdown
# Status das Features - BetLink

## ‚úÖ Conclu√≠das

### Feature 1: Setup Inicial
- **Status**: ‚úÖ Completa
- **Data**: 01/01/2024
- **Teste**: "Hello World" com Tailwind funcionando
- **Aprendizados**: [Link para doc]

### Feature 2: Componentes UI Base
- **Status**: ‚úÖ Completa
- **Data**: 02/01/2024
- **Teste**: Button e Card do shadcn renderizados
- **Aprendizados**: [Link para doc]

## üöß Em Progresso

### Feature 3: Conex√£o Supabase
- **Status**: üöß 80% - Falta tratamento de erros
- **In√≠cio**: 03/01/2024
- **Bloqueios**: Configura√ß√£o de RLS

## ‚è≥ Planejadas

### Feature 4: Sistema de Login
- **Status**: ‚è≥ Aguardando Feature 3
- **Estimativa**: 2 dias
- **Depend√™ncias**: Supabase Auth configurado
```

#### B. Documento de Aprendizados (`docs/learnings/feature-[nome].md`)

```markdown
# Aprendizados - Feature: [Nome]

## üìÖ Informa√ß√µes
- **Data**: [Data de implementa√ß√£o]
- **Dura√ß√£o**: [Tempo real vs estimado]
- **Desenvolvedor**: [IA + Humano]

## ‚úÖ O que funcionou bem
1. **Estrat√©gia**: [O que deu certo]
   - **Por qu√™**: [Motivo do sucesso]
   - **Reutilizar em**: [Onde aplicar novamente]

2. **C√≥digo reutilizado**: 
   - Componente X da Feature Y
   - Hook Z funcionou perfeitamente

## ‚ùå Problemas encontrados

### Problema 1: [T√≠tulo]
- **Descri√ß√£o**: [Detalhes do problema]
- **Erro**: `[Mensagem de erro]`
- **Causa raiz**: [Por que aconteceu]
- **Solu√ß√£o**: [Como foi resolvido]
- **Preven√ß√£o**: [Como evitar no futuro]
- **Tempo perdido**: [Quanto tempo levou]

### Problema 2: [T√≠tulo]
[...]

## üí° Decis√µes t√©cnicas

### Decis√£o 1: [Usar biblioteca X ao inv√©s de Y]
- **Contexto**: [Situa√ß√£o que levou √† decis√£o]
- **Op√ß√µes consideradas**:
  - Op√ß√£o A: [Pr√≥s e contras]
  - Op√ß√£o B: [Pr√≥s e contras]
- **Escolha final**: [Qual e por qu√™]
- **Resultado**: [Foi boa decis√£o?]

## üìä M√©tricas
- **Linhas de c√≥digo**: ~XXX
- **Arquivos criados**: Y
- **Arquivos modificados**: Z
- **Cobertura de testes**: XX%
- **Bugs encontrados**: N
- **Bugs corrigidos**: N

## üîÆ Recomenda√ß√µes futuras
1. [Sugest√£o para pr√≥ximas features]
2. [Melhorias no processo]
3. [Ferramentas que ajudariam]
```

#### C. Documento de Handover (`docs/handover/to-feature-[pr√≥xima].md`)

```markdown
# Handover para Feature: [Pr√≥xima Feature]

## üì¶ Estado Atual do Projeto

### Estrutura de Arquivos
```
project/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx ‚úÖ (n√£o modificar)
‚îÇ   ‚îú‚îÄ‚îÄ page.tsx ‚úÖ (home funcionando)
‚îÇ   ‚îî‚îÄ‚îÄ dashboard/
‚îÇ       ‚îî‚îÄ‚îÄ page.tsx ‚úÖ (nova p√°gina criada)
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ ui/ ‚úÖ (shadcn configurado)
‚îÇ   ‚îî‚îÄ‚îÄ features/
‚îÇ       ‚îî‚îÄ‚îÄ auth/ ‚úÖ (componentes de login)
‚îî‚îÄ‚îÄ lib/
    ‚îî‚îÄ‚îÄ supabase/
        ‚îî‚îÄ‚îÄ client.ts ‚úÖ (configurado e funcionando)
```

### APIs e Fun√ß√µes Dispon√≠veis

#### 1. Autentica√ß√£o
```typescript
// lib/auth.ts
export async function signIn(email: string, password: string) { ... }
export async function signOut() { ... }
export function useAuth() { ... } // Hook
```

#### 2. Banco de Dados
```typescript
// lib/supabase/queries.ts
export async function getCanais() { ... }
export async function getUser(id: string) { ... }
```

### Componentes Reutiliz√°veis

#### UI Base (shadcn)
- `Button` - Todos os estilos configurados
- `Card` - Com variantes
- `Input` - Com valida√ß√£o
- `Dialog` - Para modais

#### Features
- `LoginForm` - Formul√°rio completo
- `AuthGuard` - HOC para rotas protegidas

### Vari√°veis de Ambiente
```env
NEXT_PUBLIC_SUPABASE_URL=https://xxx.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=xxx
# Novas vari√°veis adicionadas:
NEXT_PUBLIC_APP_NAME=BetLink
```

### Estado Global
- Zustand configurado em `store/`
- Auth state funcionando
- Sem outros stores ainda

## ‚ö†Ô∏è Cuidados e Avisos

### N√£o Modificar
1. `middleware.ts` - L√≥gica de auth cr√≠tica
2. `app/layout.tsx` - Layout raiz
3. Configura√ß√µes do Supabase

### Testar Sempre
- [ ] Login/Logout continua funcionando
- [ ] Navega√ß√£o n√£o quebrou
- [ ] Console sem erros

### Poss√≠veis Conflitos
- Feature de pagamento vai usar `/app/api/`
- Telegram bot pode precisar de webhook em `/api/webhooks/`

## üöÄ Como Come√ßar

1. **Instalar depend√™ncias** (se houver novas)
```bash
npm install
```

2. **Verificar vari√°veis de ambiente**
```bash
cp .env.example .env.local
# Preencher valores necess√°rios
```

3. **Rodar projeto**
```bash
npm run dev
```

4. **Testar features anteriores**
```bash
npm run test:features
```

## üìù Notas Importantes

1. **Padr√£o de imports** est√° definido em `.eslintrc`
2. **Tipos TypeScript** gerados em `types/database.types.ts`
3. **Logs** devem seguir padr√£o `[Feature: Nome]`
4. **Novos componentes** em `/components/features/[sua-feature]/`

## üéØ Sua Feature

Com base no estado atual, sua feature pode:
- ‚úÖ Usar autentica√ß√£o existente
- ‚úÖ Criar novas p√°ginas em `/app/`
- ‚úÖ Reutilizar componentes UI
- ‚úÖ Acessar Supabase configurado

Boa sorte! üöÄ
```

---

## üõ†Ô∏è Ferramentas de Suporte

### Script de Setup por Feature
```bash
#!/bin/bash
# scripts/new-feature.sh

FEATURE_NAME=$1
mkdir -p components/features/$FEATURE_NAME
mkdir -p tests/features
mkdir -p docs/learnings

echo "Feature $FEATURE_NAME criada!"
echo "- Componentes em: components/features/$FEATURE_NAME"
echo "- Testes em: tests/features/$FEATURE_NAME.spec.ts"
echo "- Docs em: docs/learnings/feature-$FEATURE_NAME.md"
```

### Template de Teste R√°pido
```typescript
// tests/quick-test.ts
export async function quickTest(featureName: string) {
  console.log(`üß™ Teste r√°pido: ${featureName}`);
  
  // 1. Build passou?
  await exec('npm run build');
  
  // 2. Lint passou?
  await exec('npm run lint');
  
  // 3. Types OK?
  await exec('npm run type-check');
  
  // 4. Testes passaram?
  await exec(`npm run test:feature ${featureName}`);
  
  console.log('‚úÖ Todos os testes r√°pidos passaram!');
}
```

---

## üìä M√©tricas de Sucesso

### Por Feature
- ‚úÖ Teste humano passa na primeira tentativa: > 80%
- ‚è±Ô∏è Tempo de implementa√ß√£o vs estimativa: < 1.5x
- üêõ Bugs em produ√ß√£o: 0
- üîÑ Retrabalho necess√°rio: < 20%

### Geral do Projeto
- üìà Features entregues por sprint: 4-6
- üéØ Cobertura de testes: > 70%
- üìö Documenta√ß√£o completa: 100%
- üòä Satisfa√ß√£o do desenvolvedor: Alta

---

## üöÄ Benef√≠cios deste Workflow

1. **Previsibilidade**: Cada feature segue o mesmo processo
2. **Rastreabilidade**: Logs e documenta√ß√£o em cada etapa
3. **Qualidade**: Testes em m√∫ltiplas camadas
4. **Conhecimento**: Aprendizados documentados
5. **Efici√™ncia**: Handover elimina re-explica√ß√µes
6. **Escalabilidade**: Processo funciona para 10 ou 100 features